// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package kernel

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadOnCPUProfiling returns the embedded CollectionSpec for OnCPUProfiling.
func LoadOnCPUProfiling() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OnCPUProfilingBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load OnCPUProfiling: %w", err)
	}

	return spec, err
}

// LoadOnCPUProfilingObjects loads OnCPUProfiling and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*OnCPUProfilingObjects
//	*OnCPUProfilingPrograms
//	*OnCPUProfilingMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadOnCPUProfilingObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadOnCPUProfiling()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// OnCPUProfilingSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type OnCPUProfilingSpecs struct {
	OnCPUProfilingProgramSpecs
	OnCPUProfilingMapSpecs
}

// OnCPUProfilingSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type OnCPUProfilingProgramSpecs struct {
	DoPerfEvent *ebpf.ProgramSpec `ebpf:"do_perf_event"`
}

// OnCPUProfilingMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type OnCPUProfilingMapSpecs struct {
	Counts *ebpf.MapSpec `ebpf:"counts"`
	Stacks *ebpf.MapSpec `ebpf:"stacks"`
}

// OnCPUProfilingObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadOnCPUProfilingObjects or ebpf.CollectionSpec.LoadAndAssign.
type OnCPUProfilingObjects struct {
	OnCPUProfilingPrograms
	OnCPUProfilingMaps
}

func (o *OnCPUProfilingObjects) Close() error {
	return _OnCPUProfilingClose(
		&o.OnCPUProfilingPrograms,
		&o.OnCPUProfilingMaps,
	)
}

// OnCPUProfilingMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadOnCPUProfilingObjects or ebpf.CollectionSpec.LoadAndAssign.
type OnCPUProfilingMaps struct {
	Counts *ebpf.Map `ebpf:"counts"`
	Stacks *ebpf.Map `ebpf:"stacks"`
}

func (m *OnCPUProfilingMaps) Close() error {
	return _OnCPUProfilingClose(
		m.Counts,
		m.Stacks,
	)
}

// OnCPUProfilingPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadOnCPUProfilingObjects or ebpf.CollectionSpec.LoadAndAssign.
type OnCPUProfilingPrograms struct {
	DoPerfEvent *ebpf.Program `ebpf:"do_perf_event"`
}

func (p *OnCPUProfilingPrograms) Close() error {
	return _OnCPUProfilingClose(
		p.DoPerfEvent,
	)
}

func _OnCPUProfilingClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed oncpuprofiling_bpfel.o
var _OnCPUProfilingBytes []byte
